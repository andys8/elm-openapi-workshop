{-
   Hello World App
   No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

   The version of the OpenAPI document: 0.0.1

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git
   Do not edit this file manually.
-}


module Request.Default exposing (createInsurance, getInsurances, hello)

import Data.ErrorResponse as ErrorResponse exposing (ErrorResponse)
import Data.HelloWorldResponse as HelloWorldResponse exposing (HelloWorldResponse)
import Data.Insurance as Insurance exposing (Insurance)
import Dict
import Http
import Json.Decode as Decode
import Url.Builder as Url


createInsurance :
    { onSend : Result Http.Error Insurance -> msg
    , basePath : String
    , body : Maybe Insurance
    }
    -> Cmd msg
createInsurance params =
    Http.request
        { method = "POST"
        , headers = []
        , url =
            Url.crossOrigin params.basePath
                [ "insurances" ]
                []
        , body = Maybe.withDefault Http.emptyBody <| Maybe.map (Http.jsonBody << Insurance.encode) params.body
        , expect = Http.expectJson params.onSend Insurance.decoder
        , timeout = Just 30000
        , tracker = Nothing
        }


{-| Returns insurances
-}
getInsurances :
    { onSend : Result Http.Error Insurance -> msg
    , basePath : String
    }
    -> Cmd msg
getInsurances params =
    Http.request
        { method = "GET"
        , headers = []
        , url =
            Url.crossOrigin params.basePath
                [ "insurances" ]
                []
        , body = Http.emptyBody
        , expect = Http.expectJson params.onSend Insurance.decoder
        , timeout = Just 30000
        , tracker = Nothing
        }


{-| Returns 'Hello' to the caller
-}
hello :
    { onSend : Result Http.Error HelloWorldResponse -> msg
    , basePath : String
    , name : Maybe String
    }
    -> Cmd msg
hello params =
    Http.request
        { method = "GET"
        , headers = []
        , url =
            Url.crossOrigin params.basePath
                [ "hello" ]
                (List.filterMap identity [ Maybe.map (Url.string "name") params.name ])
        , body = Http.emptyBody
        , expect = Http.expectJson params.onSend HelloWorldResponse.decoder
        , timeout = Just 30000
        , tracker = Nothing
        }
